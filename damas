pygame.init()
pygame.mixer.music.load("Habanera.mp3")
pygame.mixer.music.play(-1)


# Define some colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
TRANS = (1, 2, 3)
#dupla para escger los colores


# medidads para el tablero
WIDTH = 700
HEIGHT = 700
MARK_SIZE = 50



#clase GRANDE para todo el juego
class Game:
   #clase para saber el status del juego
   def __init__(self):
      #se comienza el juego con un tablero vacio
       self.status = 'playing'
       self.turn = random.randrange(2)
       self.players = ['x', 'o']
       self.selected_token = None
       self.jumping = False
       pygame.display.set_caption("%s's turn" % self.players[self.turn % 2])
       self.game_board = [['x', '-', 'x', '-', 'x', '-', 'x', '-'],
                          ['-', 'x', '-', 'x', '-', 'x', '-', 'x'],
                          ['x', '-', 'x', '-', 'x', '-', 'x', '-'],
                          ['-', '-', '-', '-', '-', '-', '-', '-'],
                          ['-', '-', '-', '-', '-', '-', '-', '-'],
                          ['-', 'o', '-', 'o', '-', 'o', '-', 'o'],
                          ['o', '-', 'o', '-', 'o', '-', 'o', '-'],
                          ['-', 'o', '-', 'o', '-', 'o', '-', 'o']]
       #matriz creada para hacer el tablero
   def evaluate_click(self, mouse_pos):
       #indicaciones del movimiento de la pieza, si el movimiento es valido se realiza si es invalido no se realiza, tambien indica si el juego ha terminado
       if self.status == 'playing':
           row, column = get_clicked_row(mouse_pos), get_clicked_column(mouse_pos)
           if self.selected_token:
               move = self.is_valid_move(self.players[self.turn % 2], self.selected_token, row, column)
               if move[0]:
                   self.play(self.players[self.turn % 2], self.selected_token, row, column, move[1])
               elif row == self.selected_token[0] and column == self.selected_token[1]:
                   self.selected_token = None
                   if self.jumping:
                       self.jumping = False
                       self.next_turn()
               else:
                   print('invalid move')
           else:
               if self.game_board[row][column].lower() == self.players[self.turn % 2]:
                   self.selected_token = [row, column]
       elif self.status == 'game over':
           self.__init__()

   def is_valid_move(self, player, token_location, to_row, to_col):
       #funcion para saber si el cuadrado es valido para mover la pieza

       from_row = token_location[0]
       from_col = token_location[1]
       token_char = self.game_board[from_row][from_col]
       if self.game_board[to_row][to_col] != '-':
           return False, None
       if (((token_char.isupper() and abs(from_row - to_row) == 1) or (player == 'x' and to_row - from_row == 1) or
            (player == 'o' and from_row - to_row == 1)) and abs(from_col - to_col) == 1) and not self.jumping:
           return True, None
       if (((token_char.isupper() and abs(from_row - to_row) == 2) or (player == 'x' and to_row - from_row == 2) or
            (player == 'o' and from_row - to_row == 2)) and abs(from_col - to_col) == 2):
           jump_row = int((to_row - from_row) / 2 + from_row)
           jump_col = int((to_col - from_col) / 2 + from_col)
           if self.game_board[jump_row][jump_col].lower() not in [player, '-']:
               return True, [jump_row, jump_col]
       return False, None

   def play(self, player, token_location, to_row, to_col, jump):
       #funcion para mover la pieza a un cuadrado en articular, despues chekear si el juego se ha terminado

       from_row = token_location[0]
       from_col = token_location[1]
       token_char = self.game_board[from_row][from_col]
       self.game_board[to_row][to_col] = token_char
       self.game_board[from_row][from_col] = '-'
       if (player == 'x' and to_row == 7) or (player == 'o' and to_row == 0):
           self.game_board[to_row][to_col] = token_char.upper()
       if jump:
           self.game_board[jump[0]][jump[1]] = '-'
           self.selected_token = [to_row, to_col]
           self.jumping = True
       else:
           self.selected_token = None
           self.next_turn()
       winner = self.check_winner()
       if winner is None:
           pygame.display.set_caption("%s's turn" % self.players[self.turn % 2])
       elif winner == 'draw':
           pygame.display.set_caption("It's a stalemate! Click to start again")
           self.status = 'game over'
       else:
           pygame.display.set_caption("%s wins! Click to start again" % winner)
           self.status = 'game over'
